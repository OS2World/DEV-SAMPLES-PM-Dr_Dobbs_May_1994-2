_A C++ MULTITASKING CLASS LIBRARY_
by Ken Gibson


Listing One

//    threads.h  -- Multitasking class definitions
#ifndef THREADS_H
#define THREADS_H
#include "specific.h"
#define TRUE    1
#define FALSE   0

typedef void    (*vfptr)();

class Thread;
class Semaphore;

// Stack size values
#define MIN_STACK        0x400      // Minimum stack size per thread
#define NULL_STACK       0x400      // Space for NULL thread
#define INIT_STACK       0x080      // Space for scheduler initialization
#define DEFAULT_STACK    0x400      // Default size

// Values for thread states
#define THREAD_UNUSED   0           // Thread Table entry unused
#define THREAD_READY    1           // Thread is ready to run
#define THREAD_CURRENT  2           // Thread is currently running
#define THREAD_BLOCKED  3           // Blocked on a sem or timer

// Thread priorities
#define LOWEST_PRIORITY     4
#define HIGHEST_PRIORITY    0
#define NULL_PRIORITY       (LOWEST_PRIORITY+1)

// Max number of threads to allow
#define MAX_THREADS     8
#define MAX_THREADID    (MAX_THREADS-1)

//  Doubly Linked Queue class
class Dlque
{
private:
    Dlque   *flink;         // Forward Link
     Dlque  *blink;         // Backward Link
public:
    int Empty();                // Check for empty queue
    void Add( Dlque *Queue );   // Add to the back
    Dlque *Remove();            // Remove from the front
    void Delink();              // Remove from the middle
    Dlque *Peak();              // Look at front without removing.

    Dlque() { flink = blink = this; }
    ~Dlque() {}
};
//  The SCHEDULER class
class Scheduler
{
private:
     Thread  *ThreadTab[MAX_THREADS];
     Dlque   ReadyList[NULL_PRIORITY+1];
     char    *CurStackBase;
     Thread  *NullThread;
     void    ContextSwitch( pregs *OldRegs, pregs *NewRegs )
                 { asmContextSwitch( OldRegs, NewRegs ); }
public:
      static Scheduler *InstancePtr;  // Ptr to one and only instance
    Thread  *CurrentThread;          // Current thread
    char    *GetStackSpace( unsigned Size );
    void    ReSched();               // Reschedule threads
    void    AddReady( Thread *pThread );
    void    RemoveReady( Thread *pThread );
    char    AddThread( Thread *pThread );
    void    Pause();
    void    StartMultiTasking();
    Scheduler();
    ~Scheduler() {}
};
// Scheduler initialization class.  Insures that only one instance
// of the Scheduler is created no matter how many modules include
// threads.h.  Also insures that it is created before any threads.
class SchedulerInit
{
private:
    static int count;       // Compile time initialized to 0
public:
     SchedulerInit() { if( count++ == 0 )
                Scheduler::InstancePtr = new Scheduler; }
     ~SchedulerInit() { if( --count == 0 )
                delete Scheduler::InstancePtr; }
};
static SchedulerInit   SchedInit;
// THREAD class
class Thread
{
private:
     friend class Scheduler;
     friend class Semaphore;
     Dlque       Queue;          // For putting threads on Queues
     pregs       Regs;           // Processor specific saved registers
     char        State;          // Current thread state
     static void ThreadRet();    // Called if a thread returns from main
public:
     char        id;             // Thread ID
     unsigned    Priority;
     void MakeReady() { State = THREAD_READY; }
     void MakeCurrent() { State = THREAD_CURRENT; }
     void MakeBlocked() { State = THREAD_BLOCKED; }
     Thread( vfptr MainRtn,
                unsigned Priority=LOWEST_PRIORITY,
                unsigned StackSpace=DEFAULT_STACK );
     ~Thread() {}
};
//  SEMAPHORE class
class Semaphore : Dlque
{
private:
     short       count;
public:
     void Wait();
     void Signal();
     Semaphore( short InitCount=0 );
     ~Semaphore() {}
};
#endif  // THREADS_H


Listing Two

//  threads.cpp   -- Implementation of Multitasking Classes
#include        <stdio.h>
#include        <stdlib.h>
#include        "threads.h"

#define TRUE    1
#define FALSE   0

// Static count of SchedulerInit object that have been created.
int SchedulerInit::count = 0;

// Pointer to the one instance of the scheduler.
Scheduler *Scheduler::InstancePtr;

//  Dlque::Empty  --  Returns TRUE if the Dlque is empty.
inline int Dlque::Empty()
{
     return( flink == this );
}
//  Dlque::Add  -- Adds an item to the end of a doubly linked queue.
void Dlque::Add( Dlque *Queue )
{
     Queue->blink = blink;
     Queue->flink = this;
     blink->flink = Queue;
     blink = Queue;
}
//  Dlque::Remove  -- Removes item at the head of the dlque.  NULL if empty.
Dlque *Dlque::Remove()
{
     Dlque   *Item;
     if( Empty() )  {
          return( NULL );
     }
     Item = flink;
     flink = Item->flink;
     Item->flink->blink = Item->blink;
     Item->flink = Item->blink = Item;
     return( Item );
}
//  Dlque::Delink  -- Delinks an item from the middle of a dlque.
void Dlque::Delink()
{
     blink->flink = flink;
     flink->blink = blink;
     flink = blink = this;
}
//  Dlque::Peak -- Returns a pointer to the first item without removing it.
Dlque *Dlque::Peak()
{
     if( Empty() ) {
          return( NULL );
     }
     return( flink );
}
//  Scheduler Constructor
Scheduler::Scheduler()
{
     short       i;
     InstancePtr = this;
     // Initialize the Thread Table
     for( i=0; i<MAX_THREADS; ++i ) {
          ThreadTab[i] = NULL;
     }
     // Initialize System Stack Base to the current stack pointer
     CurStackBase = InitStackBase();
     // Allocate space for scheduler initialization
     CurStackBase -= INIT_STACK;
     // Create the NULL Thread.
     NullThread = new Thread( NULL, NULL_PRIORITY, NULL_STACK );
}
//  GetStackSpace -- Used by new threads to get their initial SP
char *Scheduler::GetStackSpace( unsigned Size )
{
     char *Base;
     if ( Size < MIN_STACK ) {
          Size = MIN_STACK;
     }
     Base = CurStackBase;
     CurStackBase -= Size;   // Assume stack grows toward low mem.
     return Base;
}
//  Scheduler::AddThread  -- Add a new thread into the Scheduler
char Scheduler::AddThread( Thread *pThread )
{
     register char id;
     for( id=0; id<MAX_THREADS; ++id ) {
          if( ThreadTab[id] == NULL ) {
                break;
          }
     }
     if( id == MAX_THREADS ) {
          return( FALSE );
     }
     ThreadTab[id] = pThread;
     pThread->MakeReady();   // Tell new thread to make itself READY
     AddReady( pThread );    // Add to ready list in the scheduler
     return( TRUE );
}
//  AddReady -- Add the given thread to the ReadyList
inline void Scheduler::AddReady( Thread *pThread )
{
     ReadyList[pThread->Priority].Add( &pThread->Queue );
}
//  RemoveReady -- Remove the specified thread from the ready list.
inline void Scheduler::RemoveReady( Thread *pThread )
{
     pThread->Queue.Delink();
}
//  Scheduler::ReSched  -- Picks next ready thread and calls ContextSwitch to
//      perform the context switch to the new thread.
void Scheduler::ReSched()
{
     Thread              *OldThread;
     Thread              *NewThread;
     unsigned            Priority;
     for( Priority=0; Priority<=NULL_PRIORITY; ++Priority ) {
          if( !ReadyList[Priority].Empty() ) {
                        NewThread = (Thread *)ReadyList[Priority].Remove();
                break;
          }
     }
     // If calling thread is still ready and is the highest
     // priority ready thread, just return
     if( NewThread == CurrentThread ) {
          CurrentThread->MakeCurrent();
          return;
     }
     OldThread = CurrentThread;
     CurrentThread = NewThread;
     CurrentThread->MakeCurrent();
     ContextSwitch( &OldThread->Regs, &CurrentThread->Regs );
}
//  Scheduler::Pause -- Checks for any ready threads that are equal or higher
//      priority than the calling thread.  If so, reshcedules.
void Scheduler::Pause()
{
     short       SavedPS;
     SavedPS = DisableInt();
     CurrentThread->MakeReady(); // Switch from Current to Ready
    AddReady( CurrentThread );  // Caller back on end of ReadyList
    ReSched();                  // Run new highest priority thread
    EnableInt( SavedPS );
}
//  StartMultiTasking -- Perform transformation from a single threaded 
//     application to a set of threads running in individual contexts. This
//     is done by first setting up the system variables to look like the Null
//     thread is the current thread. Then, call Pause() which will cause the
//     context of this routine to be saved as the Null thread's context. When 
//     the Null thread is rescheduled, the CPU will return to this routine. 
//     Rest of this routine then becomes the loop that runs in the Null thread.
void Scheduler::StartMultiTasking()
{
     RemoveReady( NullThread );
     CurrentThread = NullThread;
     NullThread->MakeCurrent();
     Pause();
     while( TRUE );      // Loop in the NULL thread
}
//  Thread::Thread -- Creates a new thread based on the specified params.
Thread::Thread( vfptr MainRtn,
                unsigned TaskPriority, unsigned StackSpace )
:Queue()
{
     short       *StackPtr;
     short       RegContents;
     // Set up the initial stack so that if the main routine for this
     // thread returns for some reason, it returns to ThreadRet
     StackPtr
          = (short*)Scheduler::InstancePtr->GetStackSpace(StackSpace);
     *StackPtr = (short)Thread::ThreadRet;
     // Call processor/compiler specific routine to initialize
     // the saved processor registers.
     InitPregs( &this->Regs, (short)StackPtr, (short)MainRtn );
     Priority = TaskPriority;
     Scheduler::InstancePtr->AddThread( this );
     MakeReady();                    // Set our state to READY
}
//  ThreadRet -- Routine that is placed on each thread's stack as the return
//      address in case the 'main' routine ever returns.
void Thread::ThreadRet()
{
#ifdef _DEBUG
    printf( "A Thread returned from main()\n" );
#endif
    exit( 1 );
}
//  Semaphore::Semaphaore  -- Constructor for objects of the class semaphore.
Semaphore::Semaphore( short InitCount )
{
     count = InitCount;
}

//  Semaphore::Wait -- Queue a thread as a waiter on a semaphore
void Semaphore::Wait()
{
     short       SavedPS;
     SavedPS = DisableInt();
     if( count )         // No need to block waiter
     {
          --count;
     }
     else                // Waiter must block
     {
          Scheduler::InstancePtr->CurrentThread->MakeBlocked();
          Add( &Scheduler::InstancePtr->CurrentThread->Queue );
          Scheduler::InstancePtr->ReSched();
     }
     EnableInt( SavedPS );
}
//  Semaphore::Signal -- Signal a semaphore
void Semaphore::Signal()
{
     short       SavedPS;
     Thread      *Waiter;
     SavedPS = DisableInt();
     if( Empty() )                       // No waiters to reschedule
     {
          ++count;
     }
     else                                // There are blocked waiters
     {
          Waiter = (Thread*)Remove();     // Get next waiter
          Waiter->MakeReady();            // Make it ready
          Scheduler::InstancePtr->AddReady( Waiter );
          if( Waiter->Priority <
             Scheduler::InstancePtr->CurrentThread->Priority ) {
             Scheduler::InstancePtr->CurrentThread->MakeReady();
             Scheduler::InstancePtr->AddReady(
             Scheduler::InstancePtr->CurrentThread );
             Scheduler::InstancePtr->ReSched();
          }
     }
     EnableInt( SavedPS );
}
//  main()
void main()
{
     Scheduler::InstancePtr->StartMultiTasking();
}



Listing Three

;  Intel Architecture specific routines.
     .MODEL small
     .CODE                       ; Create C compatible CS
; Offsets into the saved register area for each register
AX_OFST = 0
BX_OFST = 2
CX_OFST = 4
DX_OFST = 6
BP_OFST = 8
SI_OFST = 10
DI_OFST = 12
DS_OFST = 14
SS_OFST = 16
ES_OFST = 18
PSW_OFST= 20
PC_OFST = 22
SP_OFST = 24
INIT_PSW = 0200h        ;Thread's initial Processor Status Word
; Return the current stack pointer. This will be used as a reference for 
; assigning the stack base for each thread. 
; C Prototype:  char *InitStackBase( void );
     PUBLIC _InitStackBase
_InitStackBase  PROC
     mov ax, sp
     sub ax, 2       ;Where it will be after return
     ret
_InitStackBase ENDP
;  asmContextSwitch - Switches processor context between two threads
;  C Prototype: void asmContextSwitch( pregs *OldRegs, pregs *NewRegs );
;  1.  Assume SMALL or COMPACT memory model. Don't save and restore CODE, 
;      STACK, or DATA SEGMENTS. These always stay the same. 
;  2.  Assume Microsoft and Borland C calling conventions. This routine will
;      always be 'called' and the registers AX, BX, CX, DX do not need to be 
;      preserved across procedure calls and are not saved and restored here.
     PUBLIC _asmContextSwitch
_asmContextSwitch   PROC
; Currently have:   SP   -> Return Address
;                   SP+2 -> Old reg save area pointer
;                   SP+4 -> New reg save area pointer
     push    si              ;Save old task's SI
     push    bp              ;And BP
     mov bp, sp              ;Get back to the base of the stack frame
     add bp, 4
     mov si, [bp+2]          ;Get pointer to old register save area
     pop [si+BP_OFST]        ;Save old process's BP in save area
     pop [si+SI_OFST]        ;and SI
     mov [si+DI_OFST], di    ;and rest of the regs that must be saved
     mov [si+ES_OFST], es
     pushf                   ;Push PSW onto the stack
     pop [si+PSW_OFST]       ;then pop into save area
; Save the return address as the saved PC and increment the SP before
; saving so context will be restored as if just returned to ReSched
     mov bx, [bp]            ;Get return address off the stack
     mov [si+PC_OFST], bx
     mov bx, sp              ;Increment SP
     add bx, 2
     mov [si+SP_OFST], bx    ;and save
     mov si, [bp+4]          ;Get new process's saved regs
     mov bp, [si+BP_OFST]    ;and restore registers
     mov di, [si+DI_OFST]
     mov es, [si+ES_OFST]
     push    [si+PSW_OFST]   ;Push new PSW onto the stack
     popf                    ;then pop into PSW
     mov sp, [si+SP_OFST]    ;Switch to new stack
; Push the saved PC on the stack to be restored when RET is executed
     push    [si+PC_OFST]
     mov si, [si+SI_OFST]    ;Finally, restore SI
     ret
_asmContextSwitch  ENDP
; InitPregs -- Sets the initial saved processor register for a new thread.
; C Prototype: void InitPregs(pregs* pRegs,short InitStack,short MainRoutine );
     PUBLIC _InitPregs
_InitPregs PROC
     push    si
     push    bp
     mov bp, sp
     add bp, 4
     mov si, [bp+2]                  ;Get pointer to pregs
     ; Assume SMALL or COMPACT memory model and set the
     ; initial segments the same as the current ones
     mov [si+SS_OFST], ss
     mov [si+DS_OFST], ds
     mov [si+ES_OFST], es
     mov [si+PSW_OFST], INIT_PSW
     mov ax, [bp+4]
     mov [si+SP_OFST], ax        ;Stackbase
     mov ax, [bp+6]
     mov [si+PC_OFST], ax        ;Main Routine
     pop bp
     pop si
     ret
_InitPregs  ENDP
; DisableInt - Disables Interrupts and returns current Processor Status Word
; C Prototype:  short DisableInt( void );
     PUBLIC _DisableInt
_DisableInt PROC
     pushf
     pop     ax
     cli
     ret
_DisableInt ENDP
; EnableInt - Enables interrupts IF enabled in saved Processor Status Word
; C Prototype:  void EnableInt( short );
     PUBLIC _EnableInt
_EnableInt  PROC
     push    bp
     mov     bp, sp
     mov     ax, [bp+4]      ;Get saved Processor Status Word
     and     ax, 0200h       ;If Interrupts were enabled
     jz      NoEnable
     sti                     ;then re-enable them
NoEnable:
     pop     bp
     ret
_EnableInt  ENDP

     END


Listing Four

//  specific.h  --  Processor and compiler specific definitions
#ifndef SPECIFIC_H
#define SPECIFIC_H
// Intel processor saved register area.
struct pregs
{
     short    ax;     // Offset 0
     short    bx;     // 2
     short    cx;     // 4
     short    dx;     // 6
     short    bp;     // 8
     short    si;     // 10
     short    di;     // 12
     short    ds;     // 14
     short    ss;     // 16
     short    es;     // 18
     short    psw;    // 20
     short    pc;     // 22
     short    sp;     // 24
};
// Processor specific routines in specific.asm
extern "C" void asmContextSwitch( pregs*, pregs* );
extern "C" void InitPregs( pregs*, short, short );
extern "C" char *InitStackBase( void );
extern "C" short DisableInt( void );
extern "C" void EnableInt( short );

#endif

Listing Five

#include        <stdio.h>
#include        <dos.h>
#include        "threads.h"

//  Example Program -- Uses two threads. Thread1 is higher priority than 
//  thread2. Installs a new ISR for the DOS keyboard interrupt which signals
//  a semaphore that is waited on by thread1.  Thread1 waits for three
//  interrupts and then signals a second semaphore which is waited on by
//  thread2. Thread2 goes into a long loop each time it returns from Sem.Wait.
//  It does this a few times, restores the DOS ISR and exits.

// Allocate the two threads and semaphores
void    ThreadOneMain(void);
void    ThreadTwoMain(void);

Semaphore       Sem1;
Semaphore       Sem2;
Thread  Thread1( ThreadOneMain, HIGHEST_PRIORITY );
Thread  Thread2( ThreadTwoMain, HIGHEST_PRIORITY+1 );
//  The keyboard interrupt vector
#define KBD_VECTOR 0x09
void (_cdecl _interrupt _far *SavedISR)();
// New keyboard ISR
void __cdecl __interrupt __far OurISR()
{
     // call the original DOS ISR so it can do its
     // processing including clearing the interrupt.
     SavedISR();
     Sem1.Signal(); // Signal the interrupt
}
void ThreadOneMain()
{
     int i;
     // Collect a few interrupts then signal low priority thread.
     while( TRUE ) {
          for( i=0; i<3; ++i ) {
                Sem1.Wait();
                printf( "Interrupt signalled\n" );
          }
          Sem2.Signal();
     }
}
void ThreadTwoMain()
{
     int i;
     unsigned long Count;
     // Save the original DOS ISR and install ours
     SavedISR = _dos_getvect( KBD_VECTOR );
     _dos_setvect( KBD_VECTOR, OurISR );
     for( i=0; i<2; ++i ) {
          Sem2.Wait();
          printf( "Low priority event received\n" );
          // Simulate long background processing
          for( Count=0; Count<0x000FFFFF; ++Count )
                ;
     }
     // That's enough.  Restore the original DOS ISR and return
     // from this thread's main routine which will end the program.
     _dos_setvect( KBD_VECTOR, SavedISR );
}




